import ¬´src¬ª.normal

open Term

set_option autoImplicit false
set_option pp.fieldNotation false

variable [lc : LevelClass]

inductive Interp (i : lc.L) (I : ‚àÄ j, j < i ‚Üí Term ‚Üí Prop) : Term ‚Üí (Term ‚Üí Prop) ‚Üí Prop where
  | ne a : ne a ‚Üí Interp i I a wne
  | pi a b Pa (Pf : Term ‚Üí (Term ‚Üí Prop) ‚Üí Prop) :
    Interp i I a Pa ‚Üí
    (‚àÄ x, Pa x ‚Üí ‚àÉ Pb, Pf x Pb) ‚Üí
    (‚àÄ x Pb, Pf x Pb ‚Üí Interp i I (subst (x +: var) b) Pb) ‚Üí
    Interp i I (pi a b) (Œª f ‚Ü¶ ‚àÄ x Pb, Pa x ‚Üí Pf x Pb ‚Üí Pb (app f x))
  | ùí∞ j (lt : j < i) : Interp i I (ùí∞ (lof j)) (I j lt)
  | mty : Interp i I mty wne
  | lvl b : nf b ‚Üí Interp i I (lvl b)
    (Œª a ‚Ü¶ (‚àÉ j k, j < k ‚àß a ‚áí‚ãÜ lof j ‚àß b ‚áí‚ãÜ lof k) ‚à® wne a)
  | step a b P :
    a ‚áí b ‚Üí
    Interp i I b P ‚Üí
    Interp i I a P
notation:40 "‚ü¶" a "‚üß" i "," I "‚Üò" P => Interp i I a P

def Interps (i : lc.L) : Term ‚Üí (Term ‚Üí Prop) ‚Üí Prop :=
  Interp i (Œª j _ a ‚Ü¶ ‚àÉ P, Interps j a P)
termination_by i

notation:40 "‚ü¶" a "‚üß" i "‚Üò" P => Interps i a P

/-*-------------------------------------------------------
  Helper for interpretations of `lvl`:
  they are the same when even when extra steps are taken
-------------------------------------------------------*-/

-- ‚ö†Ô∏è uses funext and propext ‚ö†Ô∏è
theorem interpLvlEq {b c} (r : b ‚áí c) :
  (Œª a ‚Ü¶ (‚àÉ j k, j < k ‚àß a ‚áí‚ãÜ lof j ‚àß b ‚áí‚ãÜ lof k) ‚à® wne a) =
  (Œª a ‚Ü¶ (‚àÉ j k, j < k ‚àß a ‚áí‚ãÜ lof j ‚àß c ‚áí‚ãÜ lof k) ‚à® wne a) := by
  funext a; apply propext; constructor
  . intro Pa; rcases Pa with ‚ü®j, k, lt, rj, rk‚ü© | wnea
    . let ‚ü®k', rk', r‚ÇÇ‚ü© := diacon rk r
      rw [parsLofInv rk'] at r‚ÇÇ
      refine Or.inl ‚ü®j, k, lt, rj, r‚ÇÇ‚ü©
    . exact Or.inr wnea
  . intro Pa; rcases Pa with ‚ü®j, k, lt, rj, rk‚ü© | wnea
    . exact Or.inl ‚ü®j, k, lt, rj, Pars.trans r rk‚ü©
    . exact Or.inr wnea

/-*------------------------
  Simple inversion lemmas
------------------------*-/

theorem interpNeInv {i I a P} (h : ‚ü¶ a ‚üß i , I ‚Üò P) :
  ne a ‚Üí P = wne := by
  induction h <;> intro nea
  case step r _ ih => exact ih (nePar r nea)
  all_goals first | contradiction | simp

theorem interpPiInv {i I a b P} (h : ‚ü¶ pi a b ‚üß i , I ‚Üò P) :
  ‚àÉ (Pa : Term ‚Üí Prop) (Pf : Term ‚Üí (Term ‚Üí Prop) ‚Üí Prop),
    (‚ü¶ a ‚üß i , I ‚Üò Pa) ‚àß
    (‚àÄ x, Pa x ‚Üí ‚àÉ Pb, Pf x Pb) ‚àß
    (‚àÄ x Pb, Pf x Pb ‚Üí ‚ü¶ subst (x +: var) b ‚üß i, I ‚Üò Pb) ‚àß
    P = (Œª f ‚Ü¶ ‚àÄ x Pb, Pa x ‚Üí Pf x Pb ‚Üí Pb (app f x)) := by
  generalize e : pi a b = c at h
  induction h generalizing a b
  case ne => subst e; contradiction
  case pi Pa Pf ha hPf hb _ _ =>
    injection e with ea eb; subst ea; subst eb
    exact ‚ü®Pa, Pf, ha, hPf, hb, rfl‚ü©
  case step r _ ih =>
    subst e; cases r
    let ‚ü®Pa, Pf, ha, hPf, hb, e‚ü© := ih rfl
    refine ‚ü®Pa, Pf, ?_, hPf, ?_, e‚ü©
    . constructor <;> assumption
    . intro x Pb PfxPb; constructor <;> apply_rules [parCong, parRefl]
  all_goals contradiction

theorem interpùí∞Inv {i I a P} (h : ‚ü¶ ùí∞ a ‚üß i , I ‚Üò P) :
  ‚àÉ j lt, a ‚áí‚ãÜ lof j ‚àß P = I j lt := by
  generalize e : ùí∞ a = b at h
  induction h generalizing a
  case ne => subst e; contradiction
  case ùí∞ j lt => injection e with e; subst e; exists j, lt, Pars.refl _
  case step r _ ih =>
    subst e; let (Par.ùí∞ r‚ÇÅ) := r
    let ‚ü®j, lt, r‚ÇÇ, e‚ü© := ih rfl
    exact ‚ü®j, lt, Pars.trans r‚ÇÅ r‚ÇÇ, e‚ü©
  all_goals contradiction

theorem interpMtyInv {i I P} (h : ‚ü¶ mty ‚üß i , I ‚Üò P) : P = wne := by
  generalize e : mty = a at h
  induction h
  case ne => subst e; contradiction
  case mty => rfl
  case step r _ ih => subst e; cases r; simp [ih]
  all_goals contradiction

theorem interpLvlInv {i I b P} (h : ‚ü¶ lvl b ‚üß i , I ‚Üò P) :
  wnf b ‚àß P = (Œª a ‚Ü¶ (‚àÉ j k, j < k ‚àß a ‚áí‚ãÜ lof j ‚àß b ‚áí‚ãÜ lof k) ‚à® wne a) := by
  generalize e : lvl b = c at h
  induction h generalizing b
  case ne => subst e; contradiction
  case lvl nfb => injection e with e; subst e; exact ‚ü®nfWnf nfb, rfl‚ü©
  case step r _ ih =>
    subst e; let (Par.lvl r‚ÇÅ) := r
    let ‚ü®nfc, e‚ü© := ih rfl; subst e
    rw [interpLvlEq r‚ÇÅ]
    exact ‚ü®wnfBwds (parPars r‚ÇÅ) nfc, rfl‚ü©
  all_goals contradiction

theorem interpStepInv {i I T P} (h : ‚ü¶ T ‚üß i , I ‚Üò P) :
  wne T ‚à®
  (‚àÉ A B, T ‚áí‚ãÜ pi A B) ‚à®
  (‚àÉ i, T ‚áí‚ãÜ ùí∞ i) ‚à®
  (T ‚áí‚ãÜ mty) ‚à®
  (‚àÉ b, T ‚áí‚ãÜ lvl b) := by
  induction h
  case ne nea => left; exact neWne nea
  case pi => right; left; exact ‚ü®_, _, Pars.refl _‚ü©
  case ùí∞ => right; right; left; exact ‚ü®_, Pars.refl _‚ü©
  case mty => right; right; right; left; exact Pars.refl _
  case lvl => right; right; right; right; exact ‚ü®_, Pars.refl _‚ü©
  case step r‚ÇÅ _ h =>
    rcases h with neb | ‚ü®A, B, r‚ÇÇ‚ü© | ‚ü®i, r‚ÇÇ‚ü© | r‚ÇÇ | ‚ü®k, r‚ÇÇ‚ü©
    . left; exact wneBwds (parPars r‚ÇÅ) neb
    . right; left; exact ‚ü®A, B, Pars.trans r‚ÇÅ r‚ÇÇ‚ü©
    . right; right; left; exact ‚ü®i, Pars.trans r‚ÇÅ r‚ÇÇ‚ü©
    . right; right; right; left; exact Pars.trans r‚ÇÅ r‚ÇÇ
    . right; right; right; right; exact ‚ü®k, Pars.trans r‚ÇÅ r‚ÇÇ‚ü©

/-*--------------------
  Better constructors
--------------------*-/

theorem interpsNe {i a} (nea : ne a) : ‚ü¶ a ‚üß i ‚Üò wne := by
  unfold Interps; constructor; assumption

theorem interpsPi {i a b Pa P}
  (ha : ‚ü¶ a ‚üß i ‚Üò Pa)
  (hb : ‚àÄ x, Pa x ‚Üí ‚àÉ Pb, ‚ü¶ subst (x +: var) b ‚üß i ‚Üò Pb) :
  P = (Œª f ‚Ü¶ ‚àÄ x Pb, Pa x ‚Üí (‚ü¶ subst (x +: var) b‚üß i ‚Üò Pb) ‚Üí Pb (app f x)) ‚Üí
  ‚ü¶ pi a b ‚üß i ‚Üò P := by
  unfold Interps at *; intro e; subst e; constructor; assumption; assumption; simp

theorem interpsùí∞ {i j} (lt : j < i) :
  ‚ü¶ ùí∞ (lof j) ‚üß i ‚Üò (Œª a ‚Ü¶ ‚àÉ P, ‚ü¶ a ‚üß j ‚Üò P) := by
  unfold Interps at *; constructor; assumption

theorem interpsMty {i} : ‚ü¶ mty ‚üß i ‚Üò wne := by
  unfold Interps at *; exact Interp.mty

theorem interpsLvl {i b} (nfb : nf b) :
  ‚ü¶ lvl b ‚üß i ‚Üò (Œª a ‚Ü¶ (‚àÉ j k, j < k ‚àß a ‚áí‚ãÜ lof j ‚àß b ‚áí‚ãÜ lof k) ‚à® wne a) := by
  unfold Interps at *; constructor; assumption

/-*------------------------------------------------
  Interpretation respects conversion wrt the type
------------------------------------------------*-/

theorem interpFwd {i I a b P} (r : a ‚áí b) (h : ‚ü¶ a ‚üß i , I ‚Üò P) : ‚ü¶ b ‚üß i , I ‚Üò P := by
  induction h generalizing b
  case pi iha ihb =>
    cases r; constructor
    all_goals intros; apply_rules [parCong, parRefl]
  case ne nea => constructor; exact nePar r nea
  case ùí∞ => cases r; case ùí∞ r => cases r; constructor
  case mty => cases r; exact Interp.mty
  case lvl => cases r; case lvl nfb _ r =>
    rw [interpLvlEq r]; constructor; exact nfPars (parPars r) nfb
  case step r' _ ih =>
    let ‚ü®c, rc, rc'‚ü© := diamond r r'
    constructor <;> apply_rules

theorem interpsFwd {i a b P} (r : a ‚áí b) (h : ‚ü¶ a ‚üß i ‚Üò P) : ‚ü¶ b ‚üß i ‚Üò P := by
  unfold Interps at *; apply_rules [interpFwd]

theorem interpsBwd {i a b P} (r : a ‚áí b) (h : ‚ü¶ b ‚üß i ‚Üò P) : ‚ü¶ a ‚üß i ‚Üò P := by
  unfold Interps at *; constructor <;> assumption

theorem interpsFwds {i a b P} (r : a ‚áí‚ãÜ b) (h : ‚ü¶ a ‚üß i ‚Üò P) : ‚ü¶ b ‚üß i ‚Üò P := by
  induction r generalizing P <;> apply_rules [interpsFwd]

theorem interpsBwds {i a b P} (r : a ‚áí‚ãÜ b) (h : ‚ü¶ b ‚üß i ‚Üò P) : ‚ü¶ a ‚üß i ‚Üò P := by
  induction r generalizing P <;> apply_rules [interpsBwd]

theorem interpsConv {i a b P} (r : a ‚áî b) (h : ‚ü¶ a ‚üß i ‚Üò P) : ‚ü¶ b ‚üß i ‚Üò P :=
  let ‚ü®_, ra, rb‚ü© := r
  interpsBwds rb (interpsFwds ra h)

/-*----------------------------------------------------
  Backward preservation of interpretation predicate
  (we don't need the forward direction or conversion)
----------------------------------------------------*-/

theorem interpsBwdsP {i a x y P} (r : x ‚áí‚ãÜ y) (h : ‚ü¶ a ‚üß i ‚Üò P) : P y ‚Üí P x := by
  unfold Interps at h; induction h generalizing x y
  case ne => exact wneBwds r
  case pi ihb =>
    intro h x Pb Pax PfxPb
    exact ihb x Pb PfxPb (parsApp r (Pars.refl x)) (h x Pb Pax PfxPb)
  case ùí∞ => exact Œª ‚ü®P, h‚ü© ‚Ü¶ ‚ü®P, interpsBwds r h‚ü©
  case mty => exact wneBwds r
  case lvl =>
    intro Py; rcases Py with ‚ü®j, k, lt, rj, rk‚ü© | wney
    . exact Or.inl ‚ü®j, k, lt, parsTrans r rj, rk‚ü©
    . exact Or.inr (wneBwds r wney)
  case step ih => exact ih r

/-*--------------------------------
  Interpretation is deterministic
--------------------------------*-/

-- ‚ö†Ô∏è uses funext and propext ‚ö†Ô∏è
theorem interpDet' {i I a P Q} (hP : ‚ü¶ a ‚üß i , I ‚Üò P) (hQ : ‚ü¶ a ‚üß i , I ‚Üò Q) : P = Q := by
  induction hP generalizing Q
  case ne nea => exact symm (interpNeInv hQ nea)
  case pi Pa Pf _ hPf _ iha ihb =>
    let ‚ü®Pa', Pf', ha', hPf', hb', e‚ü© := interpPiInv hQ
    subst e; apply funext; intro f
    apply propext; constructor
    . intro h x Pb' Pax' PfxPb'
      have Pax : Pa x := by rw [iha ha']; exact Pax'
      let ‚ü®Pb, PfxPb‚ü© := hPf x Pax
      rw [‚Üê ihb x Pb PfxPb (hb' x Pb' PfxPb')]
      exact h x Pb Pax PfxPb
    . intro h x Pb Pax PfxPb
      have Pax' : Pa' x := by rw [‚Üê iha ha']; exact Pax
      let ‚ü®Pb', PfxPb'‚ü© := hPf' x Pax'
      rw [ihb x Pb PfxPb (hb' x Pb' PfxPb')]
      exact h x Pb' Pax' PfxPb'
  case ùí∞ =>
    let ‚ü®j, _, r, e‚ü© := interpùí∞Inv hQ
    injection (parsLofInv r) with ej; subst ej; simp [e]
  case mty => simp [interpMtyInv hQ]
  case lvl =>
    let ‚ü®_, e‚ü© := interpLvlInv hQ; rw [e]
  case step r _ ih => exact ih (interpFwd r hQ)

theorem interpsDet' {i a P Q} (hP : ‚ü¶ a ‚üß i ‚Üò P) (hQ : ‚ü¶ a ‚üß i ‚Üò Q) : P = Q := by
  unfold Interps at *; apply_rules [interpDet']

theorem interpsCumul {i j a P} (lt : i < j) (h : ‚ü¶ a ‚üß i ‚Üò P) : ‚ü¶ a ‚üß j ‚Üò P := by
  unfold Interps at h; induction h generalizing j <;> unfold Interps
  case ne nea => constructor; exact nea
  case pi iha ihb =>
    constructor
    . unfold Interps at iha; exact iha lt
    . assumption
    . intro x Pb PfxPb; unfold Interps at ihb; exact ihb x Pb PfxPb lt
  case ùí∞ k _ => constructor; apply_rules [IsTrans.trans]
  case mty => exact Interp.mty
  case lvl => constructor; assumption
  case step ih => constructor; assumption; unfold Interps at ih; exact ih lt

-- this is the only place we need trichotomy of <
theorem interpsDet {i j a P Q} (hP : ‚ü¶ a ‚üß i ‚Üò P) (hQ : ‚ü¶ a ‚üß j ‚Üò Q) : P = Q := by
  rcases trichotomous (r := lc.lt.lt) i j with lt | eq | gt
  . exact interpsDet' (interpsCumul lt hP) hQ
  . rw [eq] at hP; apply interpsDet' hP hQ
  . exact interpsDet' hP (interpsCumul gt hQ)

/-*------------------------
  Better inversion lemmas
------------------------*-/

-- ‚ö†Ô∏è uses funext and propext ‚ö†Ô∏è
theorem interpPiInv' {i I a b P} (h : ‚ü¶ pi a b ‚üß i , I ‚Üò P) :
  ‚àÉ Pa, (‚ü¶ a ‚üß i , I ‚Üò Pa) ‚àß
    (‚àÄ x, Pa x ‚Üí ‚àÉ Pb, ‚ü¶ subst (x +: var) b ‚üß i , I ‚Üò Pb) ‚àß
    P = Œª f ‚Ü¶ ‚àÄ x Pb, Pa x ‚Üí (‚ü¶ subst (x +: var) b‚üß i , I ‚Üò Pb) ‚Üí Pb (app f x) := by
  let ‚ü®Pa, Pf, ha, hPf, hfb, e‚ü© := interpPiInv h
  refine ‚ü®Pa, ha, ?_, ?_‚ü©
  . intro x Pax; let ‚ü®Pb, PfxPb‚ü© := hPf x Pax
    exact ‚ü®Pb, hfb x Pb PfxPb‚ü©
  . subst e; apply funext; intro f; apply propext; constructor
    . intro h x Pb Pax hb
      let ‚ü®Pb', PfxPb'‚ü© := hPf x Pax
      have e : Pb = Pb' := by apply interpDet' hb (hfb x Pb' PfxPb')
      rw [e]; apply_rules
    . intros; apply_rules

theorem interpsPiInv {i a b P} (h : ‚ü¶ pi a b ‚üß i ‚Üò P) :
  ‚àÉ Pa, (‚ü¶ a ‚üß i ‚Üò Pa) ‚àß
    (‚àÄ x, Pa x ‚Üí ‚àÉ Pb, ‚ü¶ subst (x +: var) b ‚üß i ‚Üò Pb) ‚àß
    P = Œª f ‚Ü¶ ‚àÄ x Pb, Pa x ‚Üí (‚ü¶ subst (x +: var) b‚üß i ‚Üò Pb) ‚Üí Pb (app f x) := by
  unfold Interps at *; exact interpPiInv' h

theorem interpsùí∞Inv {i a P} (h : ‚ü¶ ùí∞ a ‚üß i ‚Üò P) :
  ‚àÉ j, j < i ‚àß a ‚áí‚ãÜ lof j ‚àß P = Œª a ‚Ü¶ ‚àÉ P, ‚ü¶ a ‚üß j ‚Üò P := by
  unfold Interps at h
  let ‚ü®j, lt, r, e‚ü© := interpùí∞Inv h
  exact ‚ü®j, lt, r, e‚ü©

theorem interpsMtyInv {i P} (h : ‚ü¶ mty ‚üß i ‚Üò P) : P = wne := by
  unfold Interps at h; exact interpMtyInv h

theorem interpsLvlInv {i b P} (h : ‚ü¶ lvl b ‚üß i ‚Üò P) :
  wnf b ‚àß P = (Œª a ‚Ü¶ (‚àÉ j k, j < k ‚àß a ‚áí‚ãÜ lof j ‚àß b ‚áí‚ãÜ lof k) ‚à® wne a) := by
  unfold Interps at h; exact interpLvlInv h

theorem interpsStepInv {I T P} (h : ‚ü¶ T ‚üß I ‚Üò P) :
  wne T ‚à®
  (‚àÉ A B, T ‚áí‚ãÜ pi A B) ‚à®
  (‚àÉ i, T ‚áí‚ãÜ ùí∞ i) ‚à®
  (T ‚áí‚ãÜ mty) ‚à®
  (‚àÉ b, T ‚áí‚ãÜ lvl b) := by
  unfold Interps at h; exact interpStepInv h

/-*-------------------------------------
  Reducibility candidates and adequacy
-------------------------------------*-/

@[simp]
def CR (P : Term ‚Üí Prop) : Prop :=
  ‚àÄ a, (wne a ‚Üí P a) ‚àß (P a ‚Üí wnf a)

theorem interpWnf {i I a P}
  (adq : ‚àÄ {a P}, (‚ü¶ a ‚üß i , I ‚Üò P) ‚Üí CR P)
  (h : ‚ü¶ a ‚üß i , I ‚Üò P) : wnf a := by
  induction h
  case ne a nea => exact wneWnf (neWne nea)
  case ùí∞ | mty => exact nfWnf ‚ü®‚ü©
  case step r _ wnfb => exact wnfBwds (parPars r) wnfb
  case lvl nfb => exact wnfLvl (nfWnf nfb)
  case pi ha hPf _ wnfa wnfb =>
    let ‚ü®CRne, _‚ü© := adq ha (var 0)
    let ‚ü®Pb, PfPb‚ü© := hPf (var 0) (CRne (neWne ‚ü®‚ü©))
    let wnfb := wnfb (var 0) Pb PfPb
    rw [substToRename] at wnfb
    apply wnfPi wnfa (wnfRename wnfb)

theorem adequacy {i a P} (h : ‚ü¶ a ‚üß i ‚Üò P) : CR P := by
  unfold Interps at h; induction h
  case ne => intro; exact ‚ü®id, wneWnf‚ü©
  case pi hPf _ iha ihb =>
    intro f; constructor
    . intro wnef x Pb Pax PfxPb
      let ‚ü®_, CRnf‚ü© := iha x
      let ‚ü®CRne, _‚ü© := ihb x Pb PfxPb (app f x)
      exact CRne (wneApp wnef (CRnf Pax))
    . intro h
      let ‚ü®CRne, _‚ü© := iha (var 0)
      let Pa0 := (CRne (neWne ‚ü®‚ü©))
      let ‚ü®Pb, PfPb‚ü© := hPf (var 0) Pa0
      let Pbf0 := h (var 0) Pb Pa0 PfPb
      let ‚ü®_, CRnf‚ü© := ihb (var 0) Pb PfPb (app f (var 0))
      exact wnfAppInv (CRnf Pbf0)
  case ùí∞ j _ =>
    intro a; constructor
    . intro wnea
      let ‚ü®b, nfb, r‚ü© := wnea
      exact ‚ü®wne, interpsBwds r (interpsNe nfb)‚ü©
    . intro h
      let ‚ü®P, ha‚ü© := h
      unfold Interps at ha
      refine interpWnf (Œª {a} {P} ha ‚Ü¶ @adequacy j a P ?_) ha
      unfold Interps; exact ha
  case mty => intro b; exact ‚ü®id, wneWnf‚ü©
  case lvl =>
    intro _; constructor
    . exact Or.inr
    . intro Pa; rcases Pa with ‚ü®_, _, _, r, _‚ü© | wnea
      . exact ‚ü®lof _, ‚ü®‚ü©, r‚ü©
      . exact wneWnf wnea
  case step ih => exact ih
termination_by i

theorem interpsWnf {i a P} (h : ‚ü¶ a ‚üß i ‚Üò P) : wnf a := by
  unfold Interps at h
  refine interpWnf (Œª {a} {P} ha ‚Ü¶ @adequacy _ i a P ?_) h
  unfold Interps; exact ha

/-*----------------
  Semantic typing
----------------*-/

def semSubst œÉ Œì := ‚àÄ x a, In x a Œì ‚Üí ‚àÄ i P, (‚ü¶ subst œÉ a ‚üß i ‚Üò P) ‚Üí P (œÉ x)
infix:40 "‚ä®" => semSubst

def semWt Œì a A := ‚àÄ œÉ, œÉ ‚ä® Œì ‚Üí ‚àÉ i P, (‚ü¶ subst œÉ A ‚üß i ‚Üò P) ‚àß P (subst œÉ a)
notation:40 Œì:41 "‚ä®" a:41 "‚à∂" A:41 => semWt Œì a A

def semWf Œì := ‚àÄ x A, In x A Œì ‚Üí ‚àÉ k, Œì ‚ä® A ‚à∂ ùí∞ k
prefix:40 "‚ä®" => semWf

theorem semSubstNil œÉ : œÉ ‚ä® ‚¨ù := by
  intro _ _ mem; cases mem

theorem semSubstCons {Œì : Ctxt} {œÉ i a A P} :
  (‚ü¶ subst œÉ A ‚üß i ‚Üò P) ‚Üí P a ‚Üí
  œÉ ‚ä® Œì ‚Üí a +: œÉ ‚ä® Œì ‚à∑ A := by
  intro hA ha hœÉ x B mem
  cases mem
  case here =>
    intro j Q hA'
    rw [substRename, substExt ((a +: œÉ) ‚àò Nat.succ) œÉ] at hA'
    rw [interpsDet hA' hA]; exact ha
    intro n; cases n <;> simp
  case there B mem => rw [substRename]; apply_rules [hœÉ]

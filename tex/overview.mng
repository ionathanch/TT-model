\section{Overview}

To see where bounded first-class universe levels situates itself among existing work,
we compare it against three of the most common proof assistants with level polymorphism:
Rocq, Lean, and Agda.%
\footnote{\fstar's universe polymorphism works the same as Lean's.}
A simple application is the level-polymorphic identity function.

\begin{table}[H]
\begin{tabular}{rp{0.51\textwidth}}
  Rocq &
  \begin{minipage}[t]{0.51\textwidth}
  \begin{minted}{coq}
Definition id@{u} (A : Type@{u}) (a : A) := a.
  \end{minted}
  \end{minipage}
  \\
  \midrule
  Lean &
  \begin{minipage}[t]{0.51\textwidth}
  \begin{minted}{lean}
def id.{u} (A : Type u) (a : A) : A := a
  \end{minted}
  \end{minipage}
  \\
  \midrule
  Agda &
  \begin{minipage}[t]{0.51\textwidth}
  \begin{minted}{agda}
id : ∀ (ℓ : Level) (A : Set ℓ) → A → A
id ℓ A a = a
  \end{minted}
  \end{minipage}
  \\
  \midrule
  \lang & $\kw{id} : [[:concrete: Πk: Level< o. ΠA: Type k. A → A]] \coloneq [[:concrete: λk. λA. λa. a]]$
\end{tabular}
\end{table}

In Rocq and Lean, a definition can be level polymorphic
by declaring a level variable \texttt{u}.
Here, levels are in a syntactic category independent of terms,
and only top-level definitions can be level polymorphic;
lambda functions cannot otherwise be assigned level-polymorphic types.
In Agda, levels are terms, and level polymorphism is universal quantification over a level type.
The concrete levels in this level type are \texttt{0}, \texttt{1}, \dots,
and universes in these levels live in a limit universe \mintinline{agda}{Setω}.
In our system, assuming we also have levels $[[0]], [[1]], \dots, [[o]]$,
we explicitly say which levels are quantified over by specifying the bound.

The expressive power of level quantification as a type former
afforded by its first-classness as compared to mere prenex quantification
becomes evident when we consider the universe in which the types of identity functions live.

\begin{table}[H]
\begin{tabular}{rp{0.69\textwidth}}
  Rocq &
  \begin{minipage}[t]{0.69\textwidth}
  \begin{minted}{coq}
Definition Id@{u v | u < v} : Type@{v} := ∀ (A : Type@{u}), A → A.
  \end{minted}
  \end{minipage}
  \\
  \midrule
  Lean &
  \begin{minipage}[t]{0.69\textwidth}
  \begin{minted}{lean}
def Id.{u} : Type (u + 1) := ∀ (A : Type u), A → A
  \end{minted}
  \end{minipage}
  \\
  \midrule
  Agda &
  \begin{minipage}[t]{0.69\textwidth}
  \begin{minted}{agda}
Id : Setω
Id = ∀ (ℓ : Level) (A : Set ℓ) → A → A
  \end{minted}
  \end{minipage}
  \\
  \midrule
  \lang & $\kw{Id} : [[Type o]] \coloneq [[:concrete: Πk: Level< o. ΠA: Type k. A → A]]$
\end{tabular}
\end{table}

Universe levels being second-class in Rocq and Lean means we cannot talk about level polymorphism itself;
the best we can do is assign a universe to the type of an identity function at a \emph{particular} level.
Because Rocq has cumulativity, a type that lives in a smaller universe also lives in a larger one,
so to type an identity function type over types at level \texttt{u},
it suffices to assign it a universe at an arbitrary larger level \texttt{v}
by declaring an inequality constraint between the two.
In Lean, which does not have cumulativity,
we instead assign it the precise successor level.
Meanwhile, in Agda, we are able to consider the type of level polymorphism itself.
Because the universe in which the return type could be at any level within \mintinline{agda}{ω},
the overall universe must be \mintinline{agda}{Setω},
and the same principle applies to our system.

Although Agda has optional and rudimentary support for cumulativity,
idiomatic code typically does not use this feature,
instead opting for precise levels using a successor operator \mintinline{agda}{suc}
and a maximum operator \mintinline{agda}{_⊔_} on two levels,
and similarly in Lean.
Without cumulativity, we need to take the maximum of two levels
when working with a type composed of types in different universes.
With cumulativity, we instead specify an upper bound.
A type constructor for the type of constant functions at fixed levels demonstrates this use case.

\begin{table}[H]
\begin{tabular}{rp{0.83\textwidth}}
  Rocq &
  \begin{minipage}[t]{0.83\textwidth}
  \begin{minted}{coq}
Definition Const@{u v w | u < w, v < w} : Type@{w} :=
  ∀ (A : Type@{u}) (B : Type@{v}), A → B → A.
  \end{minted}
  \end{minipage}
  \\
  \midrule
  Lean &
  \begin{minipage}[t]{0.83\textwidth}
  \begin{minted}{lean}
def Const.{u, v} : Type (max u v + 1) := ∀ (A : Type u) (B : Type v), A → B → A
  \end{minted}
  \end{minipage}
  \\
  \midrule
  Agda &
  \begin{minipage}[t]{0.83\textwidth}
  \begin{minted}{agda}
Const : ∀ (ℓ₁ ℓ₂ : Level) → Set (suc (ℓ₁ ⊔ ℓ₂))
Const ℓ₁ ℓ₂ = ∀ (A : Set ℓ₁) (B : Set ℓ₂) → A → B → A
  \end{minted}
  \end{minipage}
  \\
  \midrule
  \lang &
  \begin{minipage}[t]{0.83\textwidth}
  $\kw{Const} : [[:concrete: Πl: Level< o. Πj: Level< l. Πk: Level< l. Type l]]$ \\
  \phantom{$\kw{Const}$} $\coloneq [[:concrete: λl. λj. λk. ΠA: Type j. ΠB: Type k. A → B → A]]$
  \end{minipage}
\end{tabular}
\end{table}

In Lean and Agda, the level of the output universe is
the successor of the maximum of that of the two input universes.
In Rocq and our system, which has cumulativity,
we achieve the same effect by abstracting over a third universe that bounds the other two.
The novel feature of combining bounding and first-classness
is the ability to bound levels not just by constant levels,
but also by arbitrary level terms, as is the case for $[[j]], [[k]]$ bounded by $[[l]]$.
Our system therefore encompasses both the cumulativity of Rocq via bounding
and the uniformity of Agda by treating levels as ordinary terms.

The choice of using level bounding is inspired by
the syntax of bounded sized types~\citep{sized} in Agda.%
\footnote{\url{https://agda.readthedocs.io/en/stable/language/sized-types.html}}
While the satisfiability of level constraints in Rocq can be checked using graph acyclicity,
we avoid them here because first-class levels requires them to be predicates on levels
and would involve explicitly constructing constraint proofs.
Furthermore, separating level quantification from their constraints
permits working in an inconsistent context with $[[k]] < [[k]]$,
which immediately yields $[[Type k]] : [[Type k]]$ and violates normalization.
We discuss this further in \cref{sec:paradox}.

Making levels first class also allows for higher-rank level quantification
(\eg $[[(Level< o → A) → B]]$)
and functions that compute levels (\eg $[[A → Level< o]]$).
In Agda, this is used with inductive types for generic programming~\citep{generic}.
In particular, it is needed to construct lists of level-polymorphic types
and to compute the level of a tuple of these types.

\cref{tab:comparison} summarizes the comparison of \lang to existing proof assistants.
To be more accurate, Rocq has a subtyping system that is more expressive than cumulativity,
which we discuss as an extension in \cref{sec:subtyping}.

\vspace{0.5\baselineskip}
\begin{table}[h]
\begin{tabular}{lllll}
  \toprule
  System & Levels & Polymorphism & Operators & Subsumption \\
  \midrule
  Rocq & anonymous & prenex & $<, \le, =$ & subtyping \\
  Lean, \fstar & $\omega$ & prenex & $\mathrm{max}, {} + i$ & none \\
  Agda & $\omega + \omega$ & first class & $\mathrm{max}, {} + 1$ & cumulativity (optional) \\
  \lang & --- & first class & $<$ & cumulativity \\
  \bottomrule \\
\end{tabular}
\caption{Comparison of proof assistants and universe level features}
\label{tab:comparison}
\end{table}
import ¬´TT-model¬ª.typing
import ¬´TT-model¬ª.candidates

open Term
open Nat

set_option autoImplicit false
set_option pp.fieldNotation false

variable [lc : LevelClass]

/-*------------------------------
  Renaming and weakening lemmas
------------------------------*-/

theorem semComp {Œæ : ‚Ñï ‚Üí ‚Ñï} {œÉ Œì Œî}
  (h : Œî ‚ä¢ Œæ ‚à∂ Œì)
  (hŒ∂ : œÉ ‚ä® Œî) :
  œÉ ‚àò Œæ ‚ä® Œì := by
  intro x A mem
  rw [‚Üê substRename]
  exact hŒ∂ (Œæ x) (rename Œæ A) (h x A mem)

theorem semRename {Œæ : ‚Ñï ‚Üí ‚Ñï} {Œì Œî a A}
  (hŒæ : Œî ‚ä¢ Œæ ‚à∂ Œì)
  (ha : Œì ‚ä® a ‚à∂ A) :
  Œî ‚ä® rename Œæ a ‚à∂ rename Œæ A := by
  intro œÉ hœÉ
  rw [substRename, substRename]
  exact ha (œÉ ‚àò Œæ) (semComp hŒæ hœÉ)

theorem semWeaken {Œì a A B}
  (ha : Œì ‚ä® a ‚à∂ A) :
  Œì ‚à∑ B ‚ä® rename succ a ‚à∂ rename succ A := by
  exact semRename wRenameSucc ha

/-*---------------------------------------------
  Soundness of typing wrt the logical relation
---------------------------------------------*-/

theorem semWfCons {Œì A k} (hŒì : ‚ä® Œì) (hA : Œì ‚ä® A ‚à∂ ùí∞ k) : ‚ä® Œì ‚à∑ A := by
  intros x A mem
  cases mem
  case here =>
    exists rename succ k
    exact semWeaken (A := ùí∞ k) hA
  case there x B mem =>
    let ‚ü®k, hB‚ü© := hŒì x B mem
    exists rename succ k
    exact semWeaken (A := ùí∞ k) hB

theorem soundness {w} (h : Wtf w) :
  match w with
  | ‚ü®.wf, Œì‚ü© => ‚ä® Œì
  | ‚ü®.wt, ‚ü®Œì, a, A‚ü©‚ü© => Œì ‚ä® a ‚à∂ A := by
  induction h using wtfInd
  case nil => intro x A mem; cases mem
  case cons k _ _ hŒì hA => exact semWfCons hŒì hA
  all_goals intro œÉ hœÉ
  case var x A wf mem h =>
    simp at h
    unfold semWf at h
    unfold semSubst at hœÉ
    let ‚ü®k, ih‚ü© := h x A mem
    let ‚ü®_, _, hùí∞, hA‚ü© := ih œÉ hœÉ
    let ‚ü®_, _, _, e‚ü© := interpsùí∞Inv hùí∞; subst e
    let ‚ü®_, hA‚ü© := hA
    refine ‚ü®_, _, hA, hœÉ x A mem _ _ hA‚ü©
  case pi ihA ihB =>
    let ‚ü®_, _, hùí∞, hA‚ü© := ihA œÉ hœÉ
    let ‚ü®_, _, ra, e‚ü© := interpsùí∞Inv hùí∞
    refine ‚ü®_, _, hùí∞, ?_‚ü©; subst e
    let ‚ü®PA, hA‚ü© := hA
    constructor; apply interpsPi hA _ rfl
    intro x PAx; rw [‚Üê substUnion]
    let ‚ü®_, _, hùí∞, hB‚ü© := ihB (x +: œÉ) (semSubstCons hA PAx hœÉ)
    let ‚ü®_, _, rb, e‚ü© := interpsùí∞Inv hùí∞
    subst e; rw [substRename] at rb
    let ‚ü®_, ra', rb'‚ü© := confluence ra rb
    rw [parsLofInv ra'] at rb'
    injection (parsLofInv rb') with e
    simp_rw [e, hB]
  case abs ihpi ihb =>
    let ‚ü®_, _, hùí∞, hpi‚ü© := ihpi œÉ hœÉ
    let ‚ü®_, _, _, e‚ü© := interpsùí∞Inv hùí∞
    subst e
    let ‚ü®_, hpi‚ü© := hpi
    let ‚ü®_, hA, _, e‚ü© := interpsPiInv hpi
    refine ‚ü®_, _, hpi, ?_‚ü©; subst e
    intro x Pb PAx hB; rw [‚Üê substUnion] at hB
    let ‚ü®_, _, hB', hb‚ü© := ihb (x +: œÉ) (semSubstCons hA PAx hœÉ)
    rw [interpsDet hB hB']
    exact interpsBwdsP (parsŒ≤ œÉ) hB' hb
  case app ihb iha =>
    let ‚ü®_, _, hpi, hb‚ü© := ihb œÉ hœÉ
    let ‚ü®_, PA, hA, ha‚ü© := iha œÉ hœÉ
    let ‚ü®PA', hA', hB, e‚ü© := interpsPiInv hpi
    rw [interpsDet hA hA'] at ha
    let ‚ü®_, hB‚ü© := hB (subst œÉ _) ha
    subst e; rw [‚Üê substDist]
    exact ‚ü®_, _, hB, hb _ _ ha hB‚ü©
  case ùí∞ j k _ ih =>
    let ‚ü®_, P, hk, hj‚ü© := ih œÉ hœÉ
    let ‚ü®wnfk, e‚ü© := interpsLvlInv hk; subst e
    rcases hj with ‚ü®j, k, lt, rj, rk‚ü© | wnej
    case inr ‚Ñì => sorry
    case inl =>
    let ‚ü®‚Ñì, ltk‚ü© := exists_gt k
    exact ‚ü®‚Ñì, _,
      interpsBwds (parsùí∞ rk) (interpsùí∞ ltk),
      ‚ü®_, interpsBwds (parsùí∞ rj) (interpsùí∞ lt)‚ü©‚ü©
  case mty ih =>
    let ‚ü®_, _, hj, hi‚ü© := ih œÉ hœÉ
    let ‚ü®_, _, _, e‚ü© := interpsùí∞Inv hj; subst e
    let ‚ü®P, hi‚ü© := hi
    let ‚ü®_, _, _, e‚ü© := interpsùí∞Inv hi; subst e
    exact ‚ü®_, _, hi, ‚ü®_, interpsMty‚ü©‚ü©
  case exf b _ _ _ ihA ihb =>
    let ‚ü®k, _, hmty, hb‚ü© := ihb œÉ hœÉ
    let ‚ü®_, _, hùí∞, hA‚ü© := ihA œÉ hœÉ
    let ‚ü®_, _, _, e‚ü© := interpsùí∞Inv hùí∞; subst e
    let ‚ü®P, hA‚ü© := hA
    let ‚ü®CRne, _‚ü© := adequacy hA (exf (subst œÉ b))
    rw [interpsMtyInv hmty] at hb
    refine ‚ü®_, P, hA, CRne (wneExf hb)‚ü©
  case lvl iha ihj =>
    let ‚ü®_, _, hj, hi‚ü© := ihj œÉ hœÉ
    let ‚ü®j, _, _, e‚ü© := interpsùí∞Inv hj; subst e
    let ‚ü®P, hi‚ü© := hi
    let ‚ü®_, _, _, e‚ü© := interpsùí∞Inv hi; subst e
    let ‚ü®_, P, hlvl, ha‚ü© := iha œÉ hœÉ
    let ‚ü®_, e‚ü© := interpsLvlInv hlvl
    refine ‚ü®_, _, hi, ?_‚ü©
    rw [e] at ha; rcases ha with ‚ü®k, _, _, r, _‚ü© | wnea
    case inl ha => exact ‚ü®_, interpsBwds (parsLvl r) (interpsLvl ‚ü®‚ü©)‚ü©
    case inr =>
      let ‚ü®_, nea, r‚ü© := wnea
      exact ‚ü®_, interpsBwds (parsLvl r) (interpsLvl (neNf nea))‚ü©
  case lof j k _ lt ih =>
    refine ‚ü®j, _,
      interpsLvl ‚ü®‚ü©,
      Or.inl ‚ü®_, k, lt, Pars.refl _, Pars.refl _‚ü©‚ü©
  case trans i j k _ _ ihj ihk =>
    let ‚ü®‚Ñì, Pj, hk, hPj‚ü© := ihk œÉ hœÉ
    let ‚ü®wnfk, ePj‚ü© := interpsLvlInv hk; subst ePj
    let ‚ü®_, nfk, r‚ü© := wnfk
    let ‚ü®_, Pi, hj, hPi‚ü© := ihj œÉ hœÉ
    let ‚ü®_, ePi‚ü© := interpsLvlInv hj; subst ePi
    rcases hPi with ‚ü®i', j', ltij, ri', rj'‚ü© | wnei
    case inr => exact ‚ü®‚Ñì, _, interpsBwds (parsLvl r) (interpsLvl nfk), Or.inr wnei‚ü©
    case inl =>
    rcases hPj with ‚ü®j'', k', ltjk, rj'', rk'‚ü© | wnej
    case inr => cases wneLof rj' wnej
    case inl =>
    let ‚ü®lofj, rlofj', rlofj''‚ü© := confluence rj' rj''
    have e' := parsLofInv rlofj'
    have e'' := parsLofInv rlofj''
    subst e'; cases e''
    let ‚ü®lofk, rlofk', rlofk''‚ü© := confluence rk' r
    rw [parsLofInv rlofk'] at rlofk''
    refine ‚ü®‚Ñì, _,
      interpsBwds (parsLvl r) (interpsLvl nfk),
      Or.inl ‚ü®i', k', ?_, ri', rlofk''‚ü©‚ü©
    apply IsTrans.trans; repeat assumption
  case conv e _ _ iha _ =>
    let ‚ü®_, _, hA, ha‚ü© := iha œÉ hœÉ
    exact ‚ü®_, _, interpsConv (convSubst œÉ (eqvConv e)) hA, ha‚ü©
  case sub ihj ihA =>
    let ‚ü®_, Pj, hùí∞, hA‚ü© := ihA œÉ hœÉ
    let ‚ü®_, _, rj, e‚ü© := interpsùí∞Inv hùí∞
    subst e
    let ‚ü®P, hA‚ü© := hA
    let ‚ü®_, Pk, hk, hj‚ü© := ihj œÉ hœÉ
    let ‚ü®wnfk, e‚ü© := interpsLvlInv hk
    subst e; rcases hj with ‚ü®_, k, ltj', rj', rk‚ü© | wnej
    case inr => cases wneLof rj wnej
    case inl =>
    let ‚ü®_, rj, rj'‚ü© := confluence rj rj'
    rw [parsLofInv rj'] at rj
    injection (parsLofInv rj) with e; subst e
    let ‚ü®_, ltk‚ü© := exists_gt k
    exact ‚ü®_, _,
      interpsBwds (parsùí∞ rk) (interpsùí∞ ltk),
      ‚ü®_, interpsCumul ltj' hA‚ü©‚ü©

/-*-----------------------------------
  Existence of weak normal forms for
  well typed terms and their types
-----------------------------------*-/

theorem normalization {Œì} {a A : Term} (h : Œì ‚ä¢ a ‚à∂ A) : wnf a ‚àß wnf A := by
  let ‚ü®_, _, hA, ha‚ü© := soundness h var ?_
  . rw [substId] at ha hA
    let ‚ü®_, CRnf‚ü© := adequacy hA a
    exact ‚ü®CRnf ha, interpsWnf hA‚ü©
  . intros x A _ i P hA
    rw [substId] at hA
    let ‚ü®CRne, _‚ü© := adequacy hA (var x)
    exact CRne wneVar

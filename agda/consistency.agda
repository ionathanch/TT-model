{-# OPTIONS --rewriting #-}

open import common
import accessibility
import syntactics
import reduction
import typing
import semantics
import soundness

module consistency where

{----------------------------------------------
  The naturals have a natural nonstrict order
----------------------------------------------}

data _‚â§_ : Nat ‚Üí Nat ‚Üí Set where
  zero : ‚àÄ {n} ‚Üí zero ‚â§ n
  suc : ‚àÄ {n m} ‚Üí n ‚â§ m ‚Üí suc n ‚â§ suc m

refl‚â§ : ‚àÄ {n} ‚Üí n ‚â§ n
refl‚â§ {zero} = zero
refl‚â§ {suc n} = suc (refl‚â§ {n})

suc‚â§ : ‚àÄ n ‚Üí n ‚â§ suc n
suc‚â§ zero = zero
suc‚â§ (suc n) = suc (suc‚â§ n)

trans‚â§ : ‚àÄ {n m k} ‚Üí n ‚â§ m ‚Üí m ‚â§ k ‚Üí n ‚â§ k
trans‚â§ zero m‚â§k = zero
trans‚â§ (suc n‚â§m) (suc m‚â§k) = suc (trans‚â§ n‚â§m m‚â§k)

{--------------------------------------------------
  A maximum operator and its properties wrt order
--------------------------------------------------}

max : Nat ‚Üí Nat ‚Üí Nat
max zero zero = zero
max n zero = n
max zero m = m
max (suc n) (suc m) = suc (max n m)

max‚Çó : ‚àÄ n ‚Üí max n zero ‚â° n
max‚Çó zero = refl
max‚Çó (suc n) = refl

max·µ£ : ‚àÄ m ‚Üí max zero m ‚â° m
max·µ£ zero = refl
max·µ£ (suc m) = refl

max‚â§ : ‚àÄ n m ‚Üí n ‚â§ max n m √ó m ‚â§ max n m
max‚â§ n zero rewrite max‚Çó n = refl‚â§ , zero
max‚â§ zero m rewrite max·µ£ m = zero , refl‚â§
max‚â§ (suc n) (suc m) with p , q ‚Üê max‚â§ n m = suc p , suc q

{---------------------------------------------
  The nonstrict order induces a strict order
---------------------------------------------}

_<_ : Nat ‚Üí Nat ‚Üí Set
n < m = suc n ‚â§ m

suc< : ‚àÄ n ‚Üí n < suc n
suc< zero = suc (zero)
suc< (suc n) = suc (suc< n)

trans<' : ‚àÄ {n m k} ‚Üí n < m ‚Üí m ‚â§ k ‚Üí n < k
trans<' (suc n‚â§m) (suc m‚â§k) = suc (trans‚â§ n‚â§m m‚â§k)

trans< : ‚àÄ {n m k} ‚Üí n < m ‚Üí m < k ‚Üí n < k
trans< n<m m<k = trans<' n<m (trans‚â§ (suc‚â§ _) m<k)

max< : ‚àÄ n m ‚Üí n < suc (max n m) √ó m < suc (max n m)
max< n m with p , q ‚Üê max‚â§ n m = suc p , suc q

{-----------------------------------------------
  We instantiate our type theory's levels with
  the naturals and their transitive order;
  the naturals are well founded,
  so the type theory is consistent
-----------------------------------------------}

open accessibility Nat _<_

wfNat : ‚àÄ k ‚Üí Acc k
wfNat zero = acc< (Œª ())
wfNat (suc k) with acc< f ‚Üê wfNat k = acc< (Œª {(suc j‚â§k) ‚Üí acc< (Œª i<j ‚Üí f (trans<' i<j j‚â§k))})

sup : ‚àÄ i j ‚Üí ‚àÉ[ k ] i < k √ó j < k √ó Acc k
sup i j with i< , j< ‚Üê max< i j = suc (max i j) , i< , j< , wfNat (suc (max i j))

succ : ‚àÄ j ‚Üí ‚àÉ[ k ] j < k √ó Acc k
succ j = suc j , suc< j , wfNat (suc j)

open syntactics Nat
open reduction Nat
open typing Nat _<_ trans<
open semantics Nat _<_ trans< sup
open soundness Nat _<_ trans< (zero , wfNat zero) sup succ

consistency : ‚àÄ {b} ‚Üí ‚àô ‚ä¢ b ‚¶Ç mty ‚Üí ‚ä•
consistency tb
  with k , acck , b , elb ‚Üê soundness {œÉ = var} ‚àôÃÇ  tt tb
  with () ‚Üê empty acck b elb

canonicity : ‚àÄ {b} ‚Üí ‚àô ‚ä¢ b ‚¶Ç ùîπ ‚Üí b ‚áí‚ãÜ true ‚äé b ‚áí‚ãÜ false
canonicity {b} tb
  with k , acck , ub , elb ‚Üê soundness {œÉ = var} ‚àôÃÇ  tt tb
  rewrite substId b = invùîπ-el acck ub elb